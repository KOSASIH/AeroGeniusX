import math

def calculate_thrust(engine_power: float, airspeed: float) -> float:
    """Calculate the thrust generated by the engine.

    Args:
        engine_power (float): Engine power in kW.
        airspeed (float): Airspeed in m/s.

    Returns:
        float: Thrust in N.
    """
    if engine_power <= 0 or airspeed < 0:
        raise ValueError("Engine power and airspeed must be positive values.")
    return engine_power * (airspeed / 100)

def calculate_fuel_consumption(thrust: float, engine_efficiency: float) -> float:
    """Calculate the fuel consumption based on engine efficiency.

    Args:
        thrust (float): Thrust in N.
        engine_efficiency (float): Engine efficiency in N/kW.

    Returns:
        float: Fuel consumption in kg/s.
    """
    if thrust <= 0 or engine_efficiency <= 0:
        raise ValueError("Thrust and engine efficiency must be positive values.")
    return thrust / engine_efficiency

def calculate_efficiency(thrust: float, fuel_consumption: float) -> float:
    """Calculate the efficiency of the engine.

    Args:
        thrust (float): Thrust in N.
        fuel_consumption (float): Fuel consumption in kg/s.

    Returns:
        float: Efficiency in N/kg.
    """
    if thrust <= 0 or fuel_consumption <= 0:
        raise ValueError("Thrust and fuel consumption must be positive values.")
    return thrust / fuel_consumption

def simulate_propulsion_system(engine_power: float, engine_efficiency: float, airspeed: float, altitude: float) -> str:
    """Simulate the propulsion system and return the results in markdown format.

    Args:
        engine_power (float): Engine power in kW.
        engine_efficiency (float): Engine efficiency in N/kW.
        airspeed (float): Airspeed in m/s.
        altitude (float):
